<?xml version="1.0" encoding="utf-8" ?>
<configuration scan="true" scanPeriod="60 seconds" debug="false">

    <contextName>logback-appendFile</contextName>
    <property name="logback.logdir" value="./logdir/" />
    <property name="logback.app" value="logAppendFile" />
    <property name="log.colorPattern" value="%magenta(%d{yyyy-MM-dd HH:mm:ss}) %highlight(%-5level) %yellow(%thread) %green(%logger) %msg%n"/>

    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>${log.colorPattern}</pattern>
        </encoder>
    </appender>
    <appender name="fileInfoLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--
        如果只是想要info级别的信息。只是过滤 info 还是会输出Error日志
        因为Error的级别高，
        所以我们使用下面策略，可以避免输出 Error日志
        -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!--过滤 Error-->
            <level>ERROR</level>
            <!--匹配到就禁止 DENY 拒绝-->
            <onMatch>DENY</onMatch>
            <!--没有匹配到就允许-->
            <onMismatch>ACCEPT</onMismatch>
        </filter>
        <!--
        日志名称，如果没有File属性，那么只会使用
        FileNamePattern的文件路径规则。
        如果同时有<File> 和 <FileNamePattern>,
        那么当天日志是<File>，明天会自动把今天的日志改成
        今天的日期。即File的日志都是当天的
        -->
        <!--<File>${logback.logdir}/info.${logback.app}.log</File>-->

        <!-- 滚动策略，按照时间滚动 TimeBasedRollingPolicy-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间-->
            <FileNamePattern>
                ${logback.logdir}/info.${logback.app}.%d{yyyy-MM-dd}.log
            </FileNamePattern>
            <!--只保留最近30天的日志-->
            <maxHistory>30</maxHistory>
            <!--用来指定日志文件的上限大小，如果到达这个值，会删除最老的日志-->
            <!--<totalSizeCap>1GB</totalSizeCap>-->
        </rollingPolicy>
        <!-- 之前我们说过当控制台输出的时候，使用layout，文件
            输出的时候，用encoder-->
        <encoder>
            <charset>UTF-8</charset>
            <pattern>%d [%thread] %-5level %logger{36} %line - %msg%n</pattern>
        </encoder>
    </appender>

    <!--只想要Error，除此之外不想要其它的-->
    <appender name="fileErrorLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--
        如果只是想要 Error 级别的日志，那么需要过滤一下，默认是 info 级别的，ThresholdFilter
        -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <!--设置只要Error-->
            <level>ERROR</level>
        </filter>
        <!--
        日志名称，如果没有File属性，那么只会使用
        FileNamePattern的文件路径规则。
        如果同时有<File> 和 <FileNamePattern>,
        那么当天日志是<File>，明天会自动把今天的日志改成
        今天的日期。即File的日志都是当天的
        -->
        <!--<File>${logback.logdir}/error.${logback.app}.log</File>-->

        <!-- 滚动策略，按照时间滚动 TimeBasedRollingPolicy-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间-->
            <FileNamePattern>
                ${logback.logdir}/error.${logback.app}.%d{yyyy-MM-dd}.log
            </FileNamePattern>
            <!--只保留最近30天的日志-->
            <maxHistory>30</maxHistory>
            <!--用来指定日志文件的上限大小，如果到达这个值，会删除最老的日志-->
            <!--<totalSizeCap>1GB</totalSizeCap>-->
        </rollingPolicy>
        <!-- 之前我们说过当控制台输出的时候，使用layout，文件
            输出的时候，用encoder-->
        <encoder>
            <charset>UTF-8</charset>
            <pattern>%d [%thread] %-5level %logger{36} %line - %msg%n</pattern>
        </encoder>
    </appender>
    <!--
        root 节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性
        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能设置为INHERITED或者同义词NULL。
        默认是DEBUG。可以包含零个或多个元素，标识这个appender将会添加到这个loger
    -->
    <root level="info">
        <appender-ref ref="fileInfoLog" />
        <appender-ref ref="fileErrorLog" />
    </root>
    <root level="info">
        <appender-ref ref="console" />
    </root>
</configuration>